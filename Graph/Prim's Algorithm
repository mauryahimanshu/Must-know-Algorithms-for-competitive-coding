#include <bits/stdc++. h>
using namespace std;

class Edge
{
public:
    int v = 0;
    int w = 0;

    Edge(int v, int w)
    {
        this->v = v;
        this->w = w;
    }
};

int N = 7;
vector<vector<Edge>> graph(N, vector<Edge>());

void addEdge(vector<vector<Edge>> &gp, int u, int v, int w)
{
    gp[u].push_back(Edge(v, w));
    gp[v].push_back(Edge(u, w));
}

void display(vector<vector<Edge>> &gp)
{

    for (int i = 0; i < gp.size(); i++)
    {
        cout << i << " -> ";

        // for(int j=0;j<gp[i].size();j++){
        //     Edge* e=gp[i][j];
        // }

        for (Edge e : gp[i])
        {
            cout << "(" << e.v << ", " << e.w << "), ";
        }
        cout << endl;
    }

    cout << endl;
}

class pair_
{
public:
    int src;
    int par;
    int w;
    int wsf;

    pair_(int src, int par, int w, int wsf)
    {
        this->src = src;
        this->par = par;
        this->w = w;
        this->wsf = wsf;
    }

    //bool operator<(pair_ &o)
    //{
    //return this.wsf > o.wsf; // default min PQ.
    //     //return o.wsf > this.wsf   //max PQ.
    //}
};

struct primsComp
{
public:
    bool operator()(pair_ &p1, pair_ &p2)
    {
        return p1.w > p2.w; // default min PQ.
        
    }
};
void primsAlgo(int src)
{
    vector<vector<Edge>> primsGraph(N, vector<Edge>());
    priority_queue<pair_, vector<pair_>, primsComp> pq; // by default min PQ.

    vector<bool> vis(N, false);
    pq.push(pair_(src, -1, 0, 0));
    while (pq.size() != 0)
    {
        int size = pq.size();
        while (size-- > 0)
        {
            pair_ rvtx = pq.top();
            pq.pop();

            if (vis[rvtx.src])
                continue; //for cycle.

            if (rvtx.par != -1)
                addEdge(primsGraph, rvtx.src, rvtx.par, rvtx.w);

            vis[rvtx.src] = true;
            for (Edge e : graph[rvtx.src])
            {
                if (!vis[e.v])
                    pq.push(pair_(e.v, rvtx.src, e.w, rvtx.wsf + e.w));
            }
        }
    }

    display(primsGraph);
}


void constructGraph()
{
    
    addEdge(graph, 0, 1, 10);
    addEdge(graph, 0, 3, 10);
    addEdge(graph, 1, 2, 10);
    addEdge(graph, 2, 3, 40);
    addEdge(graph, 3, 4, 2);
    addEdge(graph, 4, 5, 2);
    addEdge(graph, 4, 6, 3);
    addEdge(graph, 5, 6, 8);

    
}
// Driver code
int main() 
{ 
	constructGraph();
	primsAlgo(6);

	return 0; 
} 
